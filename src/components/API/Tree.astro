---
const html = await Astro.slots.render("default");
const flat = html.replace(/(\r\n|\n|\r)/gm, "");

const test = buildTree(flat);
const final = test;

function buildTree(html: string): string {
  const array = html.split("<ul>");
  array.shift();

  const directory = array.shift()?.split("<li>").slice(-1)[0];
  if (!directory || array.length == 0) return "";

  const children = array.join("").split("<li>");
  children.shift();

  let childElements: string[][] = [[]];
  let directories = [];
  for (const child of children) {
    if (!child.includes("</li>")) {
      childElements.push([]);
      directories.push(child);
      continue;
    }

    let index = childElements.length - 1;

    const data = child.split("</li>").shift() || "";
    const name = data.split(" ")[0];

    const regex = /\(([^)]+)\)/g;
    const matches = [...data.matchAll(regex)].map((match) => match[1]);

    const itemData = { name, description: "", type: "", required: false };

    for (const match of matches) {
      const parts = match.split(":");

      switch (parts[0]) {
        case "description":
          const description = (parts[1] || "").trim();
          itemData.description = description;
          break;
        case "type":
          const type = (parts[1] || "").trim();
          itemData.type = type;
          break;
        case "required":
          itemData.required = true;
          break;
      }
    }

    const element = `<li><span><span>${itemData.name}</span><span>${itemData.type}</span><span>required</span></span><span>${itemData.description}</span></li>`;
    childElements[index].push(element);

    if (child.includes("</ul>")) {
      const count = child.split("</ul>").length - 1;

      if (childElements.length == 0 || index == 0) continue;
      for (let i = 0; i < count; i++) {
        const last = childElements.pop() || [];
        childElements[index - 1].push(
          `<li><details open><summary>${directories[index - 1]}</summary><ul>${last.join("")}</ul></details></li>`
        );
        directories.pop();
        index--;
      }
    }
  }

  const tree = `<details open><summary>${directory}</summary><ul>${childElements[0].join("")}</ul></details>`;

  return tree;
}
---

<api-tree set:html={final} class="not-content" />
