---
import { Button, DynamicCode } from "./components.js";
import { Tabs, TabItem } from "@astrojs/starlight/components";
---

<api-tester class="not-content">
  <div class="controls">
    <Button id="submit" disabled variant="filled">Test</Button>
    <Button id="example" variant="outline">Fill Example</Button>
    <Button id="reset" variant="outline">Reset</Button>
  </div>
  <div class="results" hidden>
    <Tabs>
      <TabItem label="Response">
        <p>Status: <span class="status">200</span></p>
        <DynamicCode disabled language="javascript" name="response">
          <slot name="response" />
        </DynamicCode>
      </TabItem>
      <TabItem label="Request">
        <DynamicCode disabled language="javascript" name="request">
          <slot name="request" />
        </DynamicCode>
      </TabItem>
    </Tabs>
  </div>
</api-tester>

<style>
  api-tester {
    display: block;
    margin-top: 2rem !important;
  }

  .controls {
    display: grid;
    grid-template-columns: 1fr;
    gap: 0.5rem;

    @media (min-width: 500px) {
      grid-template-columns: 2fr 1fr 1fr;
    }
  }

  .results {
    margin-top: 1rem;
  }

  p {
    margin-bottom: 1rem;
  }
</style>

<script>
  class ApiTester extends HTMLElement {
    inputs: NodeListOf<HTMLInputElement> | null = null;
    body: HTMLTextAreaElement | null = null;
    submit: HTMLButtonElement | null = null;
    example: HTMLButtonElement | null = null;
    reset: HTMLButtonElement | null = null;
    status: HTMLSpanElement | null = null;

    constructor() {
      super();
    }

    connectedCallback() {
      this.inputs = document.querySelectorAll("api-input input");
      this.body = document.querySelector("api-dynamic-code[name=body]");
      this.submit = document.querySelector("#submit");
      this.example = document.querySelector("#example");
      this.reset = document.querySelector("#reset");
      this.status = this.querySelector(".status");

      for (const input of this.inputs) {
        input.addEventListener("input", () => {
          this.updateSubmitButton();
        });
      }

      this.submit?.addEventListener("click", () => {
        this.makeRequest();
      });

      this.reset?.addEventListener("click", () => {
        for (const input of this.inputs || []) {
          if (input.getAttribute("request-type") === "authorization") continue;
          input.value = "";
        }

        this.body
          ? // @ts-ignore
            this.body.renderText("")
          : null;

        this.updateSubmitButton();

        this.querySelector(".results")?.setAttribute("hidden", "");
      });

      this.example?.addEventListener("click", () => {
        for (const input of this.inputs || []) {
          if (input.getAttribute("request-type") === "authorization") continue;
          input.value = input.getAttribute("value-example") || "";
        }

        this.updateSubmitButton();
      });

      requestAnimationFrame(() => {
        this.updateSubmitButton();
      });
    }

    updateSubmitButton() {
      const enableButton = Array.from(this.inputs || []).every(
        (input) => input.value || input.getAttribute("required") == "false"
      );

      enableButton
        ? this.submit?.removeAttribute("disabled")
        : this.submit?.setAttribute("disabled", "");
    }

    async makeRequest() {
      this.toggleControls();

      const path = this.getFullPath();
      const method = document.querySelector("api-path")?.getAttribute("method");
      const headers = this.getAllHeader();
      const body = this.body?.querySelector("textarea")?.value || "";

      const request = {
        method: method || "GET",
        headers: {
          ...Object.fromEntries(headers.map((header) => header.split(": "))),
        },
        body: body || null,
      };

      const responseCode = document.querySelector(
        "api-dynamic-code[name=response]"
      );
      const requestCode = document.querySelector(
        "api-dynamic-code[name=request]"
      );

      try {
        const response = await fetch(path, request);
        const data = await response.json();
        // @ts-ignore
        responseCode.renderText(JSON.stringify(data, null, 2));
        if (this.status) this.status.textContent = response.status.toString();
      } catch (error) {
        // @ts-ignore
        responseCode.renderText(error);
        if (this.status) this.status.textContent = "500";
      }

      try {
        // @ts-ignore
        requestCode.renderText(
          `await fetch("${path}", ${JSON.stringify(request, null, 2)});`
        );
      } catch (error) {
        // @ts-ignore
        requestCode.renderText(error);
      }

      this.querySelector(".results")?.removeAttribute("hidden");

      this.toggleControls();
    }

    toggleControls() {
      const isLoading = this.submit?.getAttribute("loading") || "false";

      if (isLoading === "true") {
        this.submit?.setAttribute("loading", "false");
        this.submit?.removeAttribute("disabled");
        this.example?.removeAttribute("disabled");
        this.reset?.removeAttribute("disabled");
      } else {
        this.submit?.setAttribute("loading", "true");
        this.submit?.setAttribute("disabled", "");
        this.example?.setAttribute("disabled", "");
        this.reset?.setAttribute("disabled", "");
      }
    }

    getFullPath() {
      const path =
        document.querySelector("api-path")?.getAttribute("path") || "";
      const basePath =
        document.querySelector("api-path")?.getAttribute("base-path") || "";

      const parameters = Array.from(this.inputs || []).filter(
        (input) => input.getAttribute("request-type") === "parameter"
      );

      const filteredPath =
        parameters.length > 0
          ? parameters.map((parameter) =>
              path
                .toLowerCase()
                .replace(parameter.name.toLowerCase(), parameter.value)
            )
          : path;

      return `${basePath}${filteredPath}`;
    }

    getAllHeader() {
      let headers: string[] = [];

      Array.from(this.inputs || [])
        .filter((input) => input.getAttribute("request-type") === "header")
        .map((input) => headers.push(`${input.name}: ${input.value}`));

      Array.from(this.inputs || [])
        .filter(
          (input) =>
            input.getAttribute("request-type") === "authorization" &&
            input.getAttribute("auth-type") === "http"
        )
        .map((input, index) => {
          headers.map((header, index) =>
            header.includes("Authorization")
              ? (headers[index] = `${headers[index]}, ${input.value}`)
              : null
          );
          if (index === 0) headers.push(`Authorization: Bearer ${input.value}`);
        });

      return headers;
    }
  }

  customElements.define("api-tester", ApiTester);
</script>
