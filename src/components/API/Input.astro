---
const {
  inputType,
  valueName,
  valueType,
  exampleValue,
  defaultValue,
  valueDescription,
  required,
  disabled,
} = Astro.props;
---

<api-input class="not-content" {disabled}>
  <span class="title">
    {valueName}
    <span class="badge badge-type">{valueType}</span>
    {required && <span class="badge badge-required">required</span>}
  </span>
  <input
    type={inputType}
    spellcheck="false"
    placeholder={exampleValue}
    data-default-value={defaultValue}
    {disabled}
  />
  <span class="description">{valueDescription}</span>
</api-input>

<style>
  api-input {
    display: block;
  }

  input {
    background: var(--sl-color-black);
    border: solid 1px var(--sl-color-gray-4);
    color: var(--sl-color-text);
    font-size: var(--sl-text-sm);
    border-radius: 0.25rem;
    outline: none;
    line-height: 1;
    padding: 0.5rem 1rem;
    width: 100%;
    margin-top: 6px;
    transition: border-color 0.1s;
  }

  input:hover:not(:disabled) {
    border-color: var(--sl-color-gray-3);
  }

  input:focus:not(:disabled) {
    border-color: var(--sl-color-accent-high);
  }

  input:disabled,
  input:disabled::placeholder {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .title {
    display: flex;
    align-items: center;
    overflow-wrap: anywhere;
    gap: 0.5rem;
  }

  .badge {
    font-size: var(--sl-text-xs);
    border-radius: 0.25rem;
    padding: 0.1rem 0.3rem;
    line-height: 1.5;
    min-width: fit-content;
    margin-left: 0.5rem;
    margin-right: -0.5rem;
  }

  .badge-required {
    background: var(--sl-color-red);
    color: var(--sl-color-black);
  }

  .badge-type {
    background: var(--sl-color-gray-5);
  }

  .description {
    font-size: var(--sl-text-xs);
    color: var(--sl-color-gray-3);
  }
</style>

<script>
  class ApiInput extends HTMLElement {
    observer: MutationObserver = new MutationObserver(() => {});

    constructor() {
      super();
    }

    connectedCallback() {
      this.observer = new MutationObserver(this.updateDisabledState.bind(this));
      this.observer.observe(this, {
        attributes: true,
        attributeFilter: ["disabled"],
      });
    }

    disconnectedCallback() {
      this.observer.disconnect();
    }

    updateDisabledState() {
      this.hasAttribute("disabled")
        ? this.querySelector("input")?.setAttribute("disabled", "")
        : this.querySelector("input")?.removeAttribute("disabled");
    }
  }

  customElements.define("api-input", ApiInput);
</script>
