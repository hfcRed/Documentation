---
const { url } = Astro.props;
---

<div class="request-url" style="display: none;">{url}</div>
<sl-button
  class="request-test"
  size="small"
  style="width: 15%"
  variant="primary">Try</sl-button
>
<sl-button class="request-clear" size="small" style="width: 15%"
  >Clear</sl-button
>

<sl-tab-group class="request-tabs" style="display: none;">
  <sl-tab slot="nav" panel="response">Response</sl-tab>
  <sl-tab slot="nav" panel="request">Request</sl-tab>

  <sl-tab-panel name="response">
    <pre class="request-request request-code language-json"></pre>
  </sl-tab-panel>
  <sl-tab-panel name="request">
    <pre class="request-response request-code language-javascript"></pre>
  </sl-tab-panel>
</sl-tab-group>

<script is:inline>
  const baseUrl = "https://nso.hfcred.workers.dev";
  window.addEventListener("load", () => {
    const inputs = document.querySelectorAll("sl-input");
    const badge = document.querySelector(".api-route > span");
    const url = baseUrl + document.querySelector(".request-url").innerText;
    const bodyText = document.querySelector(".request-body");

    const testButton = document.querySelector(".request-test");
    const clearButton = document.querySelector(".request-clear");
    const tabs = document.querySelector(".request-tabs");
    const responseBlock = document.querySelector(".request-response");
    const requestBlock = document.querySelector(".request-request");

    testButton.onclick = async () => {
      if (testButton.hasAttribute("loading")) return;
      testButton.toggleAttribute("loading");

      const method = badge.innerText;
      const body = bodyText?.value;

      let requestUrl = "";
      let headers = {};

      for (const input of inputs) {
        const id = input.id;
        const value = input.value;

        if (id.includes("parameter")) {
          const key = id.split("_")[1];
          requestUrl = url.replace(key, value);
        }

        if (id.includes("header")) {
          const key = id.split("_")[1];
          headers[key] = value;
        }
      }

      const response = await fetch(requestUrl, {
        method,
        headers,
        body: body ? JSON.stringify(JSON.parse(body)) : undefined,
      });

      headers.Authorization
        ? (headers.Authorization =
            headers.Authorization === "" ? "" : "Bearer ••••••••••")
        : null;

      const requestString = `fetch("${requestUrl}", ${JSON.stringify(JSON.parse(`{"method": "${method}", "headers": ${JSON.stringify(headers, null, 4)}, "body": ${body ? JSON.stringify(JSON.parse(body), null, 4) : "{}"}}`), null, 2)});`;

      responseBlock.innerHTML = requestString;
      Prism.highlightElement(responseBlock);

      requestBlock.innerHTML = JSON.stringify(await response.json(), null, 2);
      Prism.highlightElement(requestBlock);

      testButton.toggleAttribute("loading");
      tabs.style.display = "block";
    };

    clearButton.onclick = () => {
      for (const input of inputs) {
        input.value = "";
      }

      bodyText
        ? (bodyText.value = bodyText.getAttribute("data-default"))
        : null;
      bodyText?.dispatchEvent(new Event("input"));
      tabs.style.display = "none";
    };
  });
</script>

<style>
  .request-code {
    margin: 0 !important;
    padding: 1rem !important;
    font-size: 0.875rem !important;
    line-height: 1.5 !important;
    font-family: Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace !important;
    width: 100% !important;
    background-color: var(--sl-color-gray-6) !important;
  }
</style>

<script src="./prism.js"></script>
