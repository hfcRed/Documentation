---
const html = await Astro.slots.render("default");
const flat = html.replace(/(\r\n|\n|\r)/gm, "");

const test = buildTree(flat);
// console.log(test);

function buildTree(html: string): {
  childElements: string[];
  allElements: string[];
} {
  const array = html.split("<ul>");
  array.shift();

  const directory = array.shift()?.split("<li>").slice(-1);
  if (!directory || array.length == 0)
    return { childElements: [], allElements: [] };

  let subDirectories = [];
  let accumulator = [];
  for (const child of array) {
    if (array.indexOf(child) == 0) {
      accumulator.push("<ul>" + child);
      continue;
    }

    if (!child.includes("</ul>")) {
      accumulator.push("<ul>" + child);
    }

    if (child.includes("</ul>")) {
      accumulator.push("<ul>" + child.split("</ul>")[0] + "</ul>");
      subDirectories.push(accumulator);

      accumulator = [];
      accumulator.push("<ul>" + child);
    }
  }

  const children = array.join("").split("<li>");
  children.shift();

  let childElements = [];
  for (const child of children) {
    if (!child.includes("</li>")) continue;

    const data = child.split("</li>").shift() || "";
    const name = data.split(" ")[0];

    const regex = /\(([^)]+)\)/g;
    const matches = [...data.matchAll(regex)].map((match) => match[1]);

    const itemData = { name, description: "", type: "", required: false };

    for (const match of matches) {
      const parts = match.split(":");

      switch (parts[0]) {
        case "description":
          const description = (parts[1] || "").trim();
          itemData.description = description;
          break;
        case "type":
          const type = (parts[1] || "").trim();
          itemData.type = type;
          break;
        case "required":
          itemData.required = true;
          break;
      }
    }

    const element = `<li><span><span>${itemData.name}</span><span>${itemData.type}</span><span>required</span></span><span>${itemData.description}</span></li>`;
    childElements.push(element);
  }

  let allElements: string[] = [];

  for (const sub of subDirectories) {
    const { childElements: returnElements, allElements: elementAccumulator } =
      buildTree(sub.join(""));

    childElements = childElements.filter(
      (name) => !returnElements.includes(name)
    );
    childElements = childElements.filter(
      (name) => !elementAccumulator.includes(name)
    );

    allElements = [...childElements, ...returnElements, ...elementAccumulator];
  }

  console.log(childElements);

  return { childElements, allElements };
}
---

<api-tree set:html={html} class="not-content" />
