---
const html = await Astro.slots.render("default");
const flat = html.replace(/(\r\n|\n|\r)/gm, "");

const tree = buildTree(flat);

function buildTree(html: string): string {
  const array = html.split("<ul>");
  array.shift();

  const directory = array.shift()?.split("<li>").slice(-1)[0];
  if (!directory || array.length == 0) return "";

  const children = array.join("").split("<li>");
  children.shift();

  let childElements: string[][] = [[]];
  let directories = [];

  for (const child of children) {
    let index = childElements.length - 1;

    if (!child.includes("</li>")) {
      childElements.push([]);
      directories.push(child);
      continue;
    }

    const data = child.split("</li>").shift() || "";
    const name = data.split(" ")[0];

    const regex = /\(([^)]+)\)/g;
    const matches = [...data.matchAll(regex)].map((match) => match[1]);

    let elementName = `<span class="name">${name}</span>`;
    let elementType = "";
    let elementRequired = "";
    let elementDescription = "";

    for (const match of matches) {
      const parts = match.split(":");

      switch (parts[0]) {
        case "type":
          const type = (parts[1] || "").trim();
          elementType = `<span class="badge badge-type">${type}</span>`;
          break;
        case "required":
          elementRequired = `<span class="badge badge-required">required</span>`;
          break;
        case "description":
          const description = (parts[1] || "").trim();
          elementDescription = `<span class="description">${description}</span>`;
          break;
      }
    }

    const element = `<li><span class="item">${elementName}${elementType}${elementRequired}${elementDescription}</span></li>`;
    childElements[index].push(element);

    if (child.includes("</ul>") && index > 0 && childElements.length > 0) {
      const count = child.split("</ul>").length - 1;

      for (let i = 0; i < count; i++) {
        const last = childElements.pop() || [];

        childElements[index - 1].push(
          `<li><details class="directory" open><summary>${directories[index - 1]}</summary><ul>${last.join("")}</ul></details></li>`
        );

        directories.pop();
        index--;
      }
    }
  }

  return `<details open><summary>${directory}</summary><ul>${childElements[0].join("")}</ul></details>`;
}
---

<api-tree set:html={tree} class="not-content" />
