---
const { language } = Astro.props;
---

<div class="editable-code">
  <div class="code-slot">
    <slot />
  </div>
  <textarea class="code-input request-body" spellcheck="false"></textarea>
  <pre aria-hidden="true" class:list={["code-output", `language-${language}`]}>
  </pre>
</div>

<script is:inline>
  window.addEventListener("DOMContentLoaded", () => {
    const editables = document.querySelectorAll(".editable-code");

    for (const editable of editables) {
      const slot = editable.querySelector(".code-slot");
      const frame = slot.querySelector(".frame");
      const copy = editable.querySelector(".copy");
      const input = editable.querySelector(".code-input");
      const output = editable.querySelector(".code-output");
      const lines = slot.querySelectorAll("code .ec-line");

      frame.querySelector("pre").remove();
      frame.appendChild(input);
      frame.appendChild(output);

      let fullCode = "";

      for (const line of lines) {
        const indent = line.querySelector(".code .indent")?.innerText;
        const text = Array.from(line.querySelectorAll("span")).pop().innerText;
        const code = indent ? `${indent}${text}` : text;
        fullCode += `${code}\n`;
      }

      fullCode = fullCode.trim();
      input.setAttribute("data-default", fullCode);

      input.value = fullCode;
      input.style.display = "block";
      output.innerHTML = fullCode;
      output.style.display = "block";
      Prism.highlightElement(output);

      copy.onclick = (e) => {
        e.preventDefault();
        navigator.clipboard.writeText(input.value);
      };

      input.oninput = () => {
        if (!input.value) {
          input.value = "{\n  \n}";
          input.selectionStart = 4;
          input.selectionEnd = 4;
        }

        output.innerHTML = input.value;
        Prism.highlightElement(output);
      };

      input.onkeydown = (e) => {
        switch (e.key) {
          case "Tab":
            insertTab(e);
            break;
          case "Enter":
            preserveTab(e);
            break;
          case "Backspace":
            deleteClosingBracket();
            break;
          case "{":
            insertString(e, "{}");
            break;
          case "[":
            insertString(e, "[]");
            break;
          case "(":
            insertString(e, "()");
            break;
          case "'":
            insertString(e, "''");
            break;
          case '"':
            insertString(e, '""');
            break;
          case "`":
            insertString(e, "``");
            break;
          case "<":
            insertString(e, "<>");
            break;
        }
      };

      function insertTab(e) {
        e.preventDefault();

        const start = input.selectionStart;
        const end = input.selectionEnd;

        input.value = `${input.value.substring(0, start)}  ${input.value.substring(end)}`;
        input.selectionStart = input.selectionEnd = start + 2;
        input.dispatchEvent(new Event("input"));
      }

      function preserveTab(e) {
        e.preventDefault();

        const start = input.selectionStart;
        const end = input.selectionEnd;
        const lineStart = input.value.lastIndexOf("\n", start - 1) + 1;
        const lineEnd = input.value.indexOf("\n", start);
        const line = input.value.substring(lineStart, lineEnd);
        const indent = line.match(/^\s*/)[0];

        if (/[)}\]>,;"'`]$/.test(line.trim())) {
          if (start !== lineEnd) {
            input.value = `${input.value.substring(0, start)}\n${indent}  \n${indent}${input.value.substring(end)}`;
            input.selectionStart = input.selectionEnd =
              start + indent.length + 3;
          } else {
            input.value = `${input.value.substring(0, start)}\n${indent}${input.value.substring(end)}`;
            input.selectionStart = input.selectionEnd =
              start + indent.length + 1;
          }
        } else {
          input.value = `${input.value.substring(0, start)}\n${indent}  ${input.value.substring(end)}`;
          input.selectionStart = input.selectionEnd = start + indent.length + 3;
        }

        input.dispatchEvent(new Event("input"));
      }

      function insertString(e, string) {
        e.preventDefault();

        const start = input.selectionStart;
        const end = input.selectionEnd;

        input.value = `${input.value.substring(0, start)}${string}${input.value.substring(end)}`;
        input.selectionStart = input.selectionEnd = start + 1;
        input.dispatchEvent(new Event("input"));
      }

      function deleteClosingBracket() {
        const start = input.selectionStart;
        const end = input.selectionEnd;

        if (
          input.value[start] === input.value[end] &&
          /[\])}>"'`]/.test(input.value[start])
        ) {
          input.value = `${input.value.substring(0, start)}${input.value.substring(end + 1)}`;
          input.selectionStart = input.selectionEnd = start;
        }

        input.dispatchEvent(new Event("input"));
      }
    }
  });
</script>

<style>
  .code-input {
    position: absolute !important;
    color: transparent !important;
    background: transparent !important;
    border: solid 1px transparent !important;
    caret-color: white !important;
    resize: none !important;
    outline: none !important;
    height: 100% !important;
    width: 100% !important;
    display: none;
  }

  .code-output {
    display: none;
  }

  .code-input,
  .code-output {
    margin: 0 !important;
    padding: 1rem !important;
    font-size: 0.875rem !important;
    line-height: 1.5 !important;
    font-family: Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace !important;
  }
</style>

<script src="./prism.js"></script>
