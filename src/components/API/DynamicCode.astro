---
import "./prism.css";
const { disabled, language, name } = Astro.props;
---

<api-dynamic-code name={name} class="not-content" {disabled}>
  <slot />
  <pre
    hidden><code class={`language-${language}`} />
    <textarea spellcheck="false" name={name} hidden {disabled} />
  </pre>
</api-dynamic-code>

<style>
  api-dynamic-code {
    display: block;
  }

  api-dynamic-code :global(textarea) {
    position: absolute !important;
    color: transparent !important;
    background: transparent !important;
    border: none !important;
    caret-color: white !important;
    resize: none !important;
    outline: none !important;
    padding: 0 !important;
    height: calc(100% - 2rem) !important;
    width: 100% !important;
    text-wrap: nowrap !important;
    scrollbar-width: none !important;
    top: 1rem !important;
    left: 1rem !important;
  }

  api-dynamic-code :global(.code) {
    padding-left: calc(-2rem - var(--ec-codePadInl)) !important;
  }

  api-dynamic-code :global(pre) {
    position: relative !important;
    padding: 1rem !important;
  }

  api-dynamic-code :global(textarea),
  api-dynamic-code :global(code) {
    font-family: var(--ec-codeFontFml) !important;
    font-size: var(--sl-text-sm) !important;
    line-height: 1.5 !important;
    padding: 0 !important;
  }
</style>

<script>
  class ApiDynamicCode extends HTMLElement {
    static observedAttributes = ["disabled"];

    textArea: any;
    code: any;

    constructor() {
      super();
    }

    attributeChangedCallback() {
      this.hasAttribute("disabled")
        ? this.querySelector("textarea")?.setAttribute("disabled", "")
        : this.querySelector("textarea")?.removeAttribute("disabled");
    }

    connectedCallback() {
      const codeLines = this.querySelectorAll(
        ".ec-line"
      ) as NodeListOf<HTMLElement>;

      let fullCode = "";
      for (const line of codeLines) {
        const indent = (line.querySelector(".indent span") as HTMLSpanElement)
          ?.innerText;
        const text = Array.from(line.querySelectorAll("span")).pop()?.innerText;

        fullCode += `${indent ? `${indent}${text}` : text}\n`;
      }

      const copy = this.querySelector(".copy") as HTMLElement;
      copy.onclick = (e) => {
        e.preventDefault();
        navigator.clipboard.writeText(this.textArea.value);
      };

      const frame = this.querySelector(".frame") as HTMLElement;
      frame.querySelector("pre")?.remove();

      this.textArea = this.querySelector("textarea") as HTMLTextAreaElement;
      this.textArea.removeAttribute("hidden");
      this.textArea.setAttribute("value-default", fullCode.trim());
      this.textArea.value = fullCode.trim();

      const pre = this.querySelector("pre") as HTMLPreElement;
      pre.removeAttribute("hidden");
      frame.appendChild(pre);

      pre.addEventListener("scroll", () => {
        this.matchTextareaWidth();
      });

      this.code = pre.querySelector("code") as HTMLElement;
      this.code.innerHTML = fullCode.trim();

      this.textArea.oninput = () => {
        const text = this.textArea.value || "";
        this.renderText(text);
        this.matchTextareaWidth();
      };

      this.matchTextareaWidth();

      this.textArea.onkeydown = (event: KeyboardEvent) => {
        switch (event.key) {
          case "Tab":
            event.preventDefault();
            this.insertTab();
            break;
          case "Enter":
            event.preventDefault();
            this.preserveTab();
            break;
          case "Backspace":
            this.deleteClosingBracket();
            break;
          case "{":
            event.preventDefault();
            this.insertString("{}");
            break;
          case "[":
            event.preventDefault();
            this.insertString("[]");
            break;
          case "(":
            event.preventDefault();
            this.insertString("()");
            break;
          case "'":
            event.preventDefault();
            this.insertString("''");
            break;
          case '"':
            event.preventDefault();
            this.insertString('""');
            break;
          case "`":
            event.preventDefault();
            this.insertString("``");
            break;
          case "<":
            event.preventDefault();
            this.insertString("<>");
            break;
          case "Escape":
            this.textArea.blur();
            break;
        }
      };
    }

    matchTextareaWidth() {
      const code = this.querySelector("code") as HTMLElement;

      this.textArea.style.setProperty(
        "width",
        `${code.clientWidth}px`,
        "important"
      );
    }

    renderText(text: string) {
      if (!text) text = this.textArea.getAttribute("value-default");

      this.code.innerHTML = text;
      this.textArea.value = text;

      // @ts-ignore
      Prism.highlightElement(this.code);
    }

    insertTab() {
      const start = this.textArea.selectionStart;
      const end = this.textArea.selectionEnd;

      this.textArea.value = `${this.textArea.value.substring(0, start)}  ${this.textArea.value.substring(end)}`;
      this.textArea.selectionStart = this.textArea.selectionEnd = start + 2;
      this.textArea.dispatchEvent(new Event("input"));
    }

    preserveTab() {
      const start = this.textArea.selectionStart;
      const end = this.textArea.selectionEnd;
      const lineStart = this.textArea.value.lastIndexOf("\n", start - 1) + 1;
      const lineEnd = this.textArea.value.indexOf("\n", start);
      const line = this.textArea.value.substring(lineStart, lineEnd);
      const indent = line.match(/^\s*/)[0];

      if (/[)}\]>,;"'`]$/.test(line.trim())) {
        if (start !== lineEnd) {
          this.textArea.value = `${this.textArea.value.substring(0, start)}\n${indent}  \n${indent}${this.textArea.value.substring(end)}`;
          this.textArea.selectionStart = this.textArea.selectionEnd =
            start + indent.length + 3;
        } else {
          this.textArea.value = `${this.textArea.value.substring(0, start)}\n${indent}${this.textArea.value.substring(end)}`;
          this.textArea.selectionStart = this.textArea.selectionEnd =
            start + indent.length + 1;
        }
      } else {
        this.textArea.value = `${this.textArea.value.substring(0, start)}\n${indent}  ${this.textArea.value.substring(end)}`;
        this.textArea.selectionStart = this.textArea.selectionEnd =
          start + indent.length + 3;
      }

      this.textArea.dispatchEvent(new Event("input"));
    }

    insertString(string: string) {
      const start = this.textArea.selectionStart;
      const end = this.textArea.selectionEnd;

      this.textArea.value = `${this.textArea.value.substring(0, start)}${string}${this.textArea.value.substring(end)}`;
      this.textArea.selectionStart = this.textArea.selectionEnd = start + 1;
      this.textArea.dispatchEvent(new Event("input"));
    }

    deleteClosingBracket() {
      const start = this.textArea.selectionStart;
      const end = this.textArea.selectionEnd;

      if (
        this.textArea.value[start] === this.textArea.value[end] &&
        /[\])}>"'`]/.test(this.textArea.value[start])
      ) {
        this.textArea.value = `${this.textArea.value.substring(0, start)}${this.textArea.value.substring(end + 1)}`;
        this.textArea.selectionStart = this.textArea.selectionEnd = start;
      }

      this.textArea.dispatchEvent(new Event("input"));
    }
  }

  customElements.define("api-dynamic-code", ApiDynamicCode);
</script>

<script src="./prism.js"></script>
