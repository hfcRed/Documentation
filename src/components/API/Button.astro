---
import Spinner from "./Spinner.astro";

const { variant, loading, disabled } = Astro.props;
---

<api-button
  loading={loading ? "true" : "false"}
  variant={variant ? variant : "filled"}
  class="not-content"
  {disabled}
>
  <button {disabled}>
    <div><slot /></div>
    <Spinner />
  </button>
</api-button>

<style>
  api-button {
    display: inline-block;
  }

  button {
    vertical-align: middle;
    font-size: var(--sl-text-sm);
    border-radius: 0.25rem;
    padding: 0.5rem 3rem;
    cursor: pointer;
    outline-offset: 1px;
    line-height: 1;
    position: relative;
    transition:
      filter 0.1s,
      border-color 0.1s,
      color 0.1s;
  }

  button:focus-visible {
    outline: 2px solid var(--sl-color-white);
  }

  button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  [variant="filled"] button {
    background: var(--sl-color-accent-high);
    color: var(--sl-color-black);
    border: 1px solid var(--sl-color-accent-high);
  }

  [variant="outline"] button {
    background: transparent;
    color: var(--sl-color-text);
    border: 1px solid var(--sl-color-gray-4);
  }

  [variant="filled"] button:hover:not(:disabled) {
    filter: brightness(0.85);
  }

  [variant="outline"] button:hover:not(:disabled) {
    border-color: var(--sl-color-accent-high);
    color: var(--sl-color-accent-high);
    filter: brightness(0.85);
  }

  [variant="filled"] button:active,
  [variant="outline"] button:active {
    filter: brightness(1);
  }

  [loading="true"] div {
    visibility: hidden;
  }

  :global(api-spinner) {
    visibility: hidden;
  }

  [loading="true"] :global(api-spinner) {
    visibility: visible;
  }
</style>

<script>
  class ApiButton extends HTMLElement {
    observer: MutationObserver = new MutationObserver(() => {});

    constructor() {
      super();
    }

    connectedCallback() {
      this.observer = new MutationObserver(this.updateDisabledState.bind(this));
      this.observer.observe(this, {
        attributes: true,
        attributeFilter: ["disabled"],
      });
    }

    disconnectedCallback() {
      this.observer.disconnect();
    }

    updateDisabledState() {
      this.hasAttribute("disabled")
        ? this.querySelector("button")?.setAttribute("disabled", "")
        : this.querySelector("button")?.removeAttribute("disabled");
    }
  }

  customElements.define("api-button", ApiButton);
</script>
