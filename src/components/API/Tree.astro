---
const html = await Astro.slots.render("default");
const flat = html.replace(/(\r\n|\n|\r)/gm, "");

const test = buildTree(flat);
// console.log(test);

function buildTree(html: string): {
  directory: string[];
  childNames: string[];
  allChildren: string[];
} {
  const array = html.split("<ul>");
  array.shift();
  const directory = array.shift()?.split("<li>").slice(-1);
  if (!directory || array.length == 0)
    return { directory: [], childNames: [], allChildren: [] };

  let subDirectories = [];
  let accumulator = [];
  for (const child of array) {
    if (array.indexOf(child) == 0) {
      accumulator.push("<ul>" + child);
      continue;
    }

    if (!child.includes("</ul>")) {
      accumulator.push("<ul>" + child);
    }

    if (child.includes("</ul>")) {
      accumulator.push("<ul>" + child.split("</ul>")[0] + "</ul>");
      subDirectories.push(accumulator);
      accumulator = [];
      accumulator.push("<ul>" + child);
    }
  }

  const children = array.join("").split("<li>");
  children.shift();
  let childNames = [];
  for (const child of children) {
    const data = child.split("<").shift()?.split(" ").shift();
    if (data) childNames.push(data);
  }

  let allChildren: string[] = [...childNames, ...directory];

  for (const sub of subDirectories) {
    const {
      directory: returnDirectory,
      childNames: returnChildren,
      allChildren: childAccumulator,
    } = buildTree(sub.join(""));

    childNames = childNames.filter((name) => !returnChildren.includes(name));
    childNames = childNames.filter((name) => !childAccumulator.includes(name));
    childNames = childNames.filter((name) => !returnDirectory.includes(name));

    allChildren = allChildren.concat(
      returnChildren,
      childAccumulator,
      returnDirectory
    );
  }

  console.log(childNames);

  return { directory, childNames, allChildren };
}
---

<api-tree set:html={html} class="not-content" />
